
<div class="alert-section">
    <h2>Alert Box Items</h2>

    @{
        <tr>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Notice</th>
            <td class="table-seperator"></td>
            <th>Date to Apply Alert</th>
            <th>Date to Hide Alert</th>
            <th>Alert Status</th>
        </tr>

        @foreach (var alert in alerts)
        {
            string backgroundColor = "none";

            if (alert.Status == ScheduleAlertStatus.Active)
            {
                backgroundColor = "lightgreen";
            }
            else if (alert.Status == ScheduleAlertStatus.Pending)
            {
                backgroundColor = "lightyellow";
            }

            <tr class="alert-box-item">
                <td style="background-color:@backgroundColor">
                    @String.Format("{0:dddd, MMMM d, yyyy}", alert.StartDate)
                </td>
                <td style="background-color:@backgroundColor">
                    @String.Format("{0:dddd, MMMM d, yyyy}", alert.EndDate)
                </td>
                <td style="background-color:@backgroundColor">
                    @alert.Description
                </td>
                <td class="table-seperator"></td>
                <td style="background-color:@backgroundColor">
                    @String.Format("{0:dddd, MMMM d, yyyy}", alert.ApplyDate)
                </td>
                <td style="background-color:@backgroundColor">
                    @String.Format("{0:dddd, MMMM d, yyyy}", alert.RevokeDate)
                </td>
                <td id="@alert.AlertId" style="background-color:@backgroundColor">

                    <EditForm Model="@alert">
                        <InputSelect @bind-Value="@alert.Status" @onchange="@OnStatusUpdate(alert.AlertId, alert.Status)" id="item-list-status" required>
                            <option value="@ScheduleAlertStatus.Active">Active</option>
                            <option value="@ScheduleAlertStatus.Pending">Pending</option>
                            <option value="@ScheduleAlertStatus.Inactive">Inactive</option>
                            <option value="@ScheduleAlertStatus.Deleted">Delete</option>
                        </InputSelect>
                    </EditForm>

                </td>
            </tr>
        }

        @if (errorMessage != null)
        {
            <h2>
                Last submit status: @errorMessage
            </h2>
        }

        <EditForm Model="@newAlert" OnValidSubmit=@ValidNewAlertFormSubmitted OnInvalidSubmit=@InvalidNewAlertFormSubmitted>
            <div class="startDate">
                <label for="startDate">Start Date*:</label>
                <InputDate TValue="DateTimeOffset?" @bind-Value="@newAlert.StartDate" id="item-add-startDate" required />
            </div>
            <div class="endDate">
                <label for="endDate">End Date:</label>
                <InputDate TValue="DateTimeOffset?" @bind-Value="@newAlert.EndDate" id="item-add-endDate" />
            </div>
            <div class="description">
                <label for="description">Notice*:</label>
                <InputTextArea @bind-Value="@newAlert.Description" id="item-add-description" required />
            </div>
            <div class="applyDate">
                <label for="applyDate">Date to Apply Notice:</label>
                <InputDate TValue="DateTimeOffset?" @bind-Value="@newAlert.ApplyDate" id="item-add-applyDate" />
            </div>
            <div class="revokeDate">
                <label for="revokeDate">Date to Hide Notice:</label>
                <InputDate TValue="DateTimeOffset?" @bind-Value="@newAlert.RevokeDate" id="item-add-revokeDate" />
            </div>
            <div class="status">
                <label for="status">Status*:</label>
                <InputSelect @bind-Value="@newAlert.Status" id="item-add-status" required>
                    <option value="@ScheduleAlertStatus.Active">Active</option>
                    <option value="@ScheduleAlertStatus.Pending">Pending</option>
                    <option value="@ScheduleAlertStatus.Inactive">Inactive</option>
                </InputSelect>
            </div>
            <div class="">
                <input type="submit" value="Add Alert">
            </div>
        </EditForm>
    }

</div>

@code {

    IOrderedEnumerable<ScheduleChangeData> alerts = ScheduleAlertService.GetAllAlerts();
    string errorMessage = null;

    ScheduleChangeData newHeader = new ScheduleChangeData();
    ScheduleChangeData newAlert = new ScheduleChangeData
    {
        StartDate = DateTimeOffset.Now,
        EndDate = DateTimeOffset.Now,
        ApplyDate = DateTimeOffset.Now,
        RevokeDate = DateTimeOffset.Now
    };

    // TO-DO: This is currently being called for all alerts on PageLoad resulting
    // in unneccessary traffic and messing up db timestamps
    public EventCallback OnStatusUpdate(Guid alertId, ScheduleAlertStatus status)
    {
        var updateAlert = new ScheduleChangeData
        {
            AlertId = alertId,
            Status = status
        };

        try
        {
            ScheduleAlertService.UpdateAlertStatus(updateAlert);
        }
        catch (Exception)
        {

        }

        // TO-DO:  Can I use this to update UI (remove deleted alerts)
        return new EventCallback();
    }

    public void ValidNewAlertFormSubmitted()
    {
        ScheduleAlertService.AddAlert(newAlert);
    }

    public void InvalidNewAlertFormSubmitted()
    {
        errorMessage = "There was a problem submitting a new alert. Please try again.";
    }

    // Attempting to get status on page load to compare to user updated status - did not work!
    //public class AlertStatusOnPageLoad
    //{
    //    private ScheduleAlertStatus status;
    //    private bool statusSet = false;

    //    //public bool StatusSet { get; set; } = false;
    //    public ScheduleAlertStatus Status
    //    {
    //        get { return status; }
    //        set
    //        {
    //            if (!statusSet)
    //            {
    //                statusSet = true;
    //                status = value;
    //            }
    //        }
    //    }

    //    public AlertStatusOnPageLoad(ScheduleAlertStatus status)
    //    {
    //        _status = status;
    //    }
    //}

}
